#!/usr/bin/env python
"""
Script to build and run Archon Docker containers with proper cleanup.
"""

import subprocess
import sys
import time
import os
from pathlib import Path

def run_command(command, cwd=None):
    """Run a command and print output in real-time."""
    print(f"Running: {' '.join(command)}")
    process = subprocess.Popen(
        command,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=False,
        cwd=cwd
    )
    
    for line in process.stdout:
        try:
            decoded_line = line.decode('utf-8', errors='replace')
            print(decoded_line.strip())
        except Exception as e:
            print(f"Error processing output: {e}")
    
    process.wait()
    return process.returncode

def check_docker():
    """Check if Docker is installed and running."""
    try:
        subprocess.run(
            ["docker", "--version"], 
            check=True, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE
        )
        return True
    except (subprocess.SubprocessError, FileNotFoundError):
        print("Error: Docker is not installed or not in PATH")
        return False

def cleanup_containers():
    """Clean up any existing Archon containers."""
    print("=== Cleaning up existing containers ===")
    for container_type in ["archon-mcp", "archon"]:
        try:
            result = subprocess.run(
                ["docker", "ps", "-a", "-q", "--filter", f"name={container_type}"],
                check=True,
                capture_output=True,
                text=True
            )
            if result.stdout.strip():
                container_ids = result.stdout.strip().split('\n')
                print(f"Found {len(container_ids)} {container_type} containers to remove")
                for cid in container_ids:
                    if cid:
                        print(f"Stopping and removing container {cid}...")
                        subprocess.run(["docker", "stop", cid], check=False)
                        subprocess.run(["docker", "rm", cid], check=False)
        except subprocess.SubprocessError as e:
            print(f"Warning: Error cleaning up {container_type} containers: {e}")

def main():
    """Main function to build and run Archon containers."""
    if not check_docker():
        return 1
    
    base_dir = Path(__file__).parent.absolute()
    
    # Clean up any existing containers
    cleanup_containers()
    
    # Check for .env file
    env_file = base_dir.parent / ".env"
    env_args = []
    if env_file.exists():
        print(f"Using environment file: {env_file}")
        env_args = ["--env-file", str(env_file)]
    else:
        print("No .env file found. Continuing without environment variables.")
        print("Note: Expected .env file at:", env_file)
    
    # Build the MCP container
    print("\n=== Building Archon MCP container ===")
    mcp_dir = base_dir / "mcp"
    if run_command(["docker", "build", "-t", "archon-mcp:latest", "."], cwd=mcp_dir) != 0:
        print("Error building MCP container")
        return 1
    
    # Build the main Archon container
    print("\n=== Building main Archon container ===")
    if run_command(["docker", "build", "-t", "archon:latest", "."], cwd=base_dir) != 0:
        print("Error building main Archon container")
        return 1
    
    # Run the MCP container
    print("\n=== Starting Archon MCP container ===")
    mcp_cmd = [
        "docker", "run", "-d",
        "--name", "archon-mcp-container",
        "--add-host", "host.docker.internal:host-gateway",
        "-p", "8100:8100",
        "archon-mcp:latest"
    ]
    if run_command(mcp_cmd) != 0:
        print("Error starting Archon MCP container")
        return 1

    # Give MCP a moment to start
    print("Waiting for MCP to start...")
    time.sleep(2)

    # Run the Archon container
    print("\n=== Starting Archon container ===")
    cmd = [
        "docker", "run", "-d",
        "--name", "archon-container",
        "--add-host", "host.docker.internal:host-gateway",
        "-p", "8501:8501",  # Streamlit
        "-p", "8110:8110",  # Graph service
    ]
    
    # Add environment variables if .env exists
    if env_args:
        cmd.extend(env_args)
    
    # Add image name
    cmd.append("archon:latest")
    
    if run_command(cmd) != 0:
        print("Error starting Archon container")
        return 1
    
    # Print success message
    print("\n=== Archon is now running! ===")
    print("-> Access the Streamlit UI at: http://localhost:8501")
    print("-> MCP API is available at: http://localhost:8100")
    print("\nTo stop Archon, run: docker stop archon-container archon-mcp-container")
    print("To clean up: docker rm archon-container archon-mcp-container")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
